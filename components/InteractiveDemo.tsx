
import React, { useState } from 'react';
import { useGame } from '../context/GameContext';
import ThemeToggle from './ThemeToggle';
import { triggerHaptic } from '../services/haptic';
import { playSound } from '../services/audioPlayer';
import Logo from './Logo';

const GeminiIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="inline-block mr-1.5 align-middle"><path d="M12.466 22.48L5.348 15.362C5.348 15.362 5.348 15.362 5.348 15.362L12.466 22.48ZM12.466 22.48L19.584 15.362C19.584 15.362 19.584 15.362 19.584 15.362L12.466 22.48ZM12.466 1.52L5.348 8.638L12.466 1.52ZM12.466 1.52L19.584 8.638L12.466 1.52Z" stroke="currentColor" strokeWidth="1.5"></path><path d="M5.348 8.638L12.466 15.756L5.348 8.638ZM5.348 8.638L1.8 12.186L5.348 8.638ZM19.584 8.638L12.466 15.756L19.584 8.638ZM19.584 8.638L23.132 12.186L19.584 8.638ZM5.348 15.362L1.8 11.814L5.348 15.362ZM19.584 15.362L23.132 11.814L19.584 15.362Z" stroke="currentColor" strokeWidth="1.5"></path></svg>;
const SoundIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 inline-block" fill="none" viewBox="0 0 24 24" strokeWidth={2} stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5 5 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.01 9.01 0 012.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75z" /></svg>;
const HapticIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M7 4h10a1 1 0 011 1v14a1 1 0 01-1 1H7a1 1 0 01-1-1V5a1 1 0 011-1z" /><path strokeLinecap="round" strokeLinejoin="round" d="M4 8l-1 2 1 2M20 8l1 2-1 2" /></svg>;
const ThemeIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.718 9.718 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998z" /></svg>;
const AIBanterIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>;


const steps = [
    {
        title: "Welcome to Higher Please!",
        icon: <Logo className="w-16 h-16" />,
        content: "Ready to test your vibe? This quick tour will show you how our AI-powered quiz works and what you get with Pro.",
    },
    {
        title: "AI-Powered Quizzes",
        icon: <GeminiIcon />,
        content: "Every quiz is dynamically generated by Google's Gemini AI. That means you get fresh, surreal, and hilarious questions every single time you play. No repeats, just cosmic vibes.",
    },
    {
        title: "Immersive Feedback (Pro)",
        icon: <div className="flex gap-2"><SoundIcon /><HapticIcon /></div>,
        content: "Feel the quiz with sound effects and haptic feedback for right and wrong answers. It's like your phone is playing along with you. Try it!",
        interactive: 'feedback',
    },
    {
        title: "Custom Themes (Pro)",
        icon: <ThemeIcon />,
        content: "Choose your own visual vibe. Switch between a clean light mode and a slick, battery-saving dark mode. The choice is yours in the Pro version.",
        interactive: 'theme',
    },
    {
        title: "Witty AI Banter (Pro)",
        icon: <AIBanterIcon />,
        content: "Think you can outsmart a superintelligent AI? With the Pro plan, our Quizmaster will occasionally fire back with funny, custom-generated feedback on your answers.",
    },
    {
        title: "You're Ready to Go!",
        icon: <Logo className="w-16 h-16" />,
        content: "That's the tour! Get the full experience by signing up for Pro, or try a 5-question classic demo game now.",
        interactive: 'final',
    },
];


const InteractiveDemo: React.FC = () => {
    const { dispatch } = useGame();
    const [step, setStep] = useState(0);

    const handleNext = () => setStep(s => Math.min(s + 1, steps.length - 1));
    const handleBack = () => setStep(s => Math.max(s - 1, 0));
    const handleClose = () => dispatch({ type: 'RESTART_GAME' });
    const handleGoPro = () => {
      handleClose(); // Close tour first
      dispatch({ type: 'UPGRADE_TO_PRO' });
    }
    const handleStartDemo = () => dispatch({ type: 'START_DEMO' });

    const currentStep = steps[step];
    
    const renderInteractiveElement = () => {
        switch(currentStep.interactive) {
            case 'feedback':
                return (
                    <div className="flex flex-col sm:flex-row gap-4 mt-6">
                        <button onClick={() => { playSound('correct'); triggerHaptic('correct'); }} className="flex-1 p-3 bg-teal-500/20 text-teal-600 dark:text-[#00DFA2] rounded-lg border border-teal-500/30 hover:bg-teal-500/30 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black focus-visible:ring-teal-500">
                            Simulate Correct
                        </button>
                         <button onClick={() => { playSound('incorrect'); triggerHaptic('incorrect'); }} className="flex-1 p-3 bg-pink-500/20 text-pink-600 dark:text-[#FF0060] rounded-lg border border-pink-500/30 hover:bg-pink-500/30 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black focus-visible:ring-pink-500">
                            Simulate Incorrect
                        </button>
                    </div>
                );
            case 'theme':
                return (
                    <div className="flex justify-center items-center gap-4 mt-6">
                        <p className="text-sm font-medium">Toggle the theme:</p>
                        <ThemeToggle onToggle={() => dispatch({ type: 'TOGGLE_THEME' })} />
                    </div>
                );
            case 'final':
                return (
                    <div className="flex flex-col gap-3 mt-6">
                        <button onClick={handleGoPro} className="w-full cta-button bg-gradient-to-r from-[#0079FF] via-[#00DFA2] to-[#F6FA70] text-black dark:text-white font-bold text-lg py-3 px-6 rounded-full shadow-lg hover:shadow-xl hover:shadow-[#00DFA2]/40 dark:hover:shadow-[#00DFA2]/30 hover:scale-105 transition-all duration-300 transform focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black focus-visible:ring-[#00DFA2]">
                            Sign In & Go Pro
                        </button>
                        <button onClick={handleStartDemo} className="w-full bg-transparent border-2 border-neutral-300 dark:border-neutral-700 text-gray-800 dark:text-white font-bold py-3 px-6 rounded-full shadow-sm hover:bg-gray-100/50 dark:hover:bg-neutral-800/50 hover:border-[#0079FF] transition-all duration-300 transform focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black focus-visible:ring-[#0079FF]">
                            Play Classic Demo
                        </button>
                    </div>
                );
            default:
                return null;
        }
    }

    return (
        <div role="dialog" aria-modal="true" className="fixed inset-0 z-40 flex items-center justify-center p-4 bg-gray-50/80 dark:bg-black/80 backdrop-blur-md animate-modal-fade-in">
            <div className="relative w-full max-w-md bg-white/80 dark:bg-black/30 backdrop-blur-2xl border-2 border-gray-200 dark:border-neutral-800/50 rounded-2xl shadow-2xl p-4 sm:p-6 flex flex-col max-h-[90vh] animate-card-fade-in-up">
                <button onClick={handleClose} className="absolute top-3 right-3 text-neutral-500 hover:text-black dark:hover:text-white transition-colors rounded-full p-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-[#0079FF] focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black" aria-label="Close Tour">
                    <svg className="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
                
                <div className="flex-grow overflow-y-auto text-center px-2 pb-4">
                    <div className="flex justify-center text-teal-600 dark:text-[#00DFA2] mb-4 h-16 items-center">
                        {currentStep.icon}
                    </div>

                    <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-3">{currentStep.title}</h2>
                    <p className="text-neutral-600 dark:text-neutral-300 leading-relaxed">
                        {currentStep.content}
                    </p>
                    {renderInteractiveElement()}
                </div>
                
                {currentStep.interactive !== 'final' && (
                     <div className="flex-shrink-0 grid grid-cols-3 items-center mt-auto pt-4 border-t border-gray-200 dark:border-neutral-800/50">
                        <div className="text-left">
                            <button onClick={handleBack} disabled={step === 0} className="px-4 py-2 text-neutral-500 rounded-md disabled:opacity-30 hover:bg-gray-200 dark:hover:bg-neutral-800 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-[#0079FF] focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black">Back</button>
                        </div>
                        
                        <div className="flex items-center justify-center gap-2">
                            {steps.map((_, i) => (
                                <div key={i} className={`w-2.5 h-2.5 rounded-full transition-colors ${i === step ? 'bg-[#0079FF]' : 'bg-gray-300 dark:bg-neutral-700'}`}></div>
                            ))}
                        </div>
                        
                        <div className="text-right">
                           <button onClick={handleNext} className="px-4 py-2 bg-[#0079FF] text-white font-bold rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-black focus-visible:ring-[#00DFA2]">
                                {step === steps.length - 2 ? 'Finish' : 'Next'}
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default InteractiveDemo;